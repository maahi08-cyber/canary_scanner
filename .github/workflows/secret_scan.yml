# =================================================================
# Canary Scanner - Enterprise CI/CD Workflow (v4.0)
# =================================================================
# This workflow automates building, scanning, validating, and reporting
# to provide a comprehensive and intelligent security gate.

name: üê§ Canary Security Scan

# =================================================================
# WORKFLOW TRIGGERS
# =================================================================
on:
  # Run on pushes to primary branches
  push:
    branches: [ "main", "master", "develop" ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'examples/**'

  # Run on pull requests targeting primary branches
  pull_request:
    branches: [ "main", "master", "develop" ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'examples/**'

  # Allow manual triggering for testing and ad-hoc scans
  workflow_dispatch:
    inputs:
      scan_path:
        description: 'Path to scan (default: .)'
        required: false
        default: '.'
      fail_policy:
        description: 'Fail on active secrets of this confidence or higher'
        required: false
        default: 'medium'
        type: choice
        options:
        - any
        - critical
        - high
        - medium

# =================================================================
# SECURITY PERMISSIONS (PRINCIPLE OF LEAST PRIVILEGE)
# =================================================================
permissions:
  contents: read          # To check out code
  pull-requests: write  # To post comments on PRs
  checks: write         # To create/update commit status checks
  security-events: write # To upload SARIF reports (future enhancement)

# =================================================================
# ENVIRONMENT VARIABLES
# =================================================================
env:
  # Use a specific tag for consistency, updated on new releases
  SCANNER_IMAGE_TAG: canary-scanner:${{ github.sha }}
  PYTHON_VERSION: '3.11'

# =================================================================
# WORKFLOW JOBS
# =================================================================
jobs:
  # =================================================================
  # JOB 1: Build & Test Scanner Image
  # =================================================================
  build:
    name: üê≥ Build Scanner Image
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üîß Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Login to GitHub Container Registry (Optional but good practice)
        if: github.event_name != 'pull_request' # Avoid on forks
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üèóÔ∏è Build and Cache Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          # Target the 'scanner_runtime' stage from your multi-stage Dockerfile
          target: scanner_runtime
          # Do not push, just load into local docker and save as artifact
          push: false
          load: true
          tags: ${{ env.SCANNER_IMAGE_TAG }}
          # Use GHA cache for faster builds
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: üß™ Test Scanner Image Version
        run: |
          docker run --rm ${{ env.SCANNER_IMAGE_TAG }} --version

      - name: üì¶ Save Image as Artifact
        run: |
          mkdir -p /tmp/image
          docker save ${{ env.SCANNER_IMAGE_TAG }} -o /tmp/image/scanner-image.tar

      - name: üì§ Upload Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: scanner-image-artifact
          path: /tmp/image/scanner-image.tar
          retention-days: 1 # Keep artifact for a short period

  # =================================================================
  # JOB 2: Scan, Validate, and Report
  # =================================================================
  scan-and-validate:
    name: üîç Scan & Validate Secrets
    runs-on: ubuntu-latest
    needs: build # This job depends on the successful completion of the 'build' job
    timeout-minutes: 20 # Allow ample time for validation calls

    outputs:
      scan_outcome: ${{ steps.policy-check.outcome }}
      active_findings_count: ${{ steps.process-results.outputs.active_findings_count }}
      total_findings_count: ${{ steps.process-results.outputs.total_findings_count }}

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üì• Download Scanner Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: scanner-image-artifact
          path: /tmp/image

      - name: üê≥ Load Scanner Image
        run: docker load -i /tmp/image/scanner-image.tar

      - name: üìÅ Prepare Scan Environment
        run: mkdir -p scan-results

      - name: üî¨ Run Scanner with Validation
        id: scan
        run: |
          # Run the scanner with Phase 4 flags. Results are output to a JSON file.
          docker run --rm \
            -v "${{ github.workspace }}:/scan" \
            -e VALIDATION_SERVICE_URL="${{ secrets.VALIDATION_SERVICE_URL }}" \
            -e VALIDATION_API_KEY="${{ secrets.VALIDATION_API_KEY }}" \
            -e LOG_LEVEL="DEBUG" \
            ${{ env.SCANNER_IMAGE_TAG }} \
            /scan/${{ github.event.inputs.scan_path || '.' }} \
              --output-json \
              --validate \
              --repository "${{ github.repository }}" \
              --commit "${{ github.sha }}" \
              --branch "${{ github.ref_name }}" \
            > scan-results/validated_results.json

        # This step does NOT fail the job. Failure is determined by policy later.
        continue-on-error: true

      - name: üìä Process Validated Results
        id: process-results
        run: |
          # Parse the final JSON to get counts for policy decisions and reporting.
          if [ ! -f "scan-results/validated_results.json" ]; then
            echo "::error::Scan results file not found! The scanner may have crashed."
            exit 1
          fi

          # Use jq to extract key metrics
          TOTAL_COUNT=$(jq -r '.scan_metadata.total_findings_reported // 0' scan-results/validated_results.json)
          ACTIVE_COUNT=$(jq -r '.scan_metadata.active_findings_count // 0' scan-results/validated_results.json)
          ACTIVE_CRITICAL=$(jq -r '[.findings[] | select(.validation_status == "active" and .confidence == "High")] | length' scan-results/validated_results.json)
          ACTIVE_MEDIUM=$(jq -r '[.findings[] | select(.validation_status == "active" and .confidence == "Medium")] | length' scan-results/validated_results.json)

          echo "Total potential findings: $TOTAL_COUNT"
          echo "Active findings: $ACTIVE_COUNT"
          echo "Active Critical (High): $ACTIVE_CRITICAL"
          echo "Active Medium: $ACTIVE_MEDIUM"

          # Set outputs for subsequent steps
          echo "total_findings_count=$TOTAL_COUNT" >> $GITHUB_OUTPUT
          echo "active_findings_count=$ACTIVE_COUNT" >> $GITHUB_OUTPUT
          echo "active_critical_count=$ACTIVE_CRITICAL" >> $GITHUB_OUTPUT
          echo "active_medium_count=$ACTIVE_MEDIUM" >> $GITHUB_OUTPUT

          # Generate a human-readable job summary
          echo "## üõ°Ô∏è Canary Scan Summary" >> $GITHUB_STEP_SUMMARY
          if [ "$ACTIVE_COUNT" -eq 0 ]; then
            echo "‚úÖ **No active secrets detected!**" >> $GITHUB_STEP_SUMMARY
            echo "*($TOTAL_COUNT potential findings were determined to be inactive, unvalidated, or below threshold.)*" >> $GITHUB_STEP_SUMMARY
          else
            echo "üö® **$ACTIVE_COUNT active secret(s) found!**" >> $GITHUB_STEP_SUMMARY
            echo "| Severity | Active Count |" >> $GITHUB_STEP_SUMMARY
            echo "|---|---|" >> $GITHUB_STEP_SUMMARY
            echo "| üî¥ Critical (High) | $ACTIVE_CRITICAL |" >> $GITHUB_STEP_SUMMARY
            echo "| üü° Medium | $ACTIVE_MEDIUM |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Action Required:** Please review the detailed artifacts and remediate active secrets." >> $GITHUB_STEP_SUMMARY
          fi

      - name: ‚û°Ô∏è Send Results to Dashboard
        if: success() && secrets.DASHBOARD_API_URL != ''
        run: |
          # Use curl to POST the final validated JSON to the dashboard
          echo "Sending results to dashboard at ${{ secrets.DASHBOARD_API_URL }}"
          curl -X POST \
            -H "Content-Type: application/json" \
            -d @scan-results/validated_results.json \
            "${{ secrets.DASHBOARD_API_URL }}/api/v1/scan" \
            --fail --silent --show-error

      - name: üì§ Upload Detailed Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: canary-scan-report-${{ github.run_id }}
          path: scan-results/validated_results.json
          retention-days: 7

      - name: üí¨ Update Pull Request
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const activeCount = parseInt('${{ steps.process-results.outputs.active_findings_count }}') || 0;
            const totalCount = parseInt('${{ steps.process-results.outputs.total_findings_count }}') || 0;
            const activeCrit = parseInt('${{ steps.process-results.outputs.active_critical_count }}') || 0;

            let commentBody;
            if (activeCount === 0) {
              commentBody = `‚úÖ **Canary Scan Passed**\n\nNo active secrets were detected. Found ${totalCount} potential findings that were inactive or below the policy threshold.`;
            } else {
              commentBody = `üö® **Canary Scan FAILED**\n\nFound **${activeCount} active secret(s)** that must be remediated before merging.\n\n| Severity | Active Count |\n|---|---|\n| üî¥ Critical | ${activeCrit} |\n| üü° Medium | ${parseInt('${{ steps.process-results.outputs.active_medium_count }}') || 0} |\n\nPlease review the workflow run for detailed artifacts.`;
            }
            commentBody += `\n\n*Run ID: ${{ github.run_id }}*`;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });

      - name: üõ°Ô∏è Enforce Security Policy
        id: policy-check
        run: |
          # This step determines the final pass/fail status of the job based on policy.
          FAIL_POLICY="${{ github.event.inputs.fail_policy || 'medium' }}"
          ACTIVE_CRITICAL=${{ steps.process-results.outputs.active_critical_count }}
          ACTIVE_MEDIUM=${{ steps.process-results.outputs.active_medium_count }}
          ACTIVE_COUNT=${{ steps.process-results.outputs.active_findings_count }}

          echo "Enforcing policy: Fail on active secrets with confidence '${FAIL_POLICY}' or higher."

          if [ "$FAIL_POLICY" = "any" ] && [ "$ACTIVE_COUNT" -gt 0 ]; then
            echo "::error::Policy violation: Found ${ACTIVE_COUNT} active secret(s)."
            exit 1
          elif [ "$FAIL_POLICY" = "critical" ] && [ "$ACTIVE_CRITICAL" -gt 0 ]; then
            echo "::error::Policy violation: Found ${ACTIVE_CRITICAL} active Critical (High) secret(s)."
            exit 1
          elif [ "$FAIL_POLICY" = "high" ] && [ "$ACTIVE_CRITICAL" -gt 0 ]; then
            echo "::error::Policy violation: Found ${ACTIVE_CRITICAL} active High confidence secret(s)."
            exit 1
          elif [ "$FAIL_POLICY" = "medium" ] && [ $(($ACTIVE_CRITICAL + $ACTIVE_MEDIUM)) -gt 0 ]; then
            echo "::error::Policy violation: Found $(($ACTIVE_CRITICAL + $ACTIVE_MEDIUM)) active Medium or High confidence secret(s)."
            exit 1
          fi

          echo "‚úÖ Policy check passed."

  # =================================================================
  # JOB 3: Security Gate
  # =================================================================
  security-gate:
    name:  Gatekeeper
    runs-on: ubuntu-latest
    needs: [scan-and-validate]
    if: always() # Run always to provide a clear final status

    steps:
      - name: üö¶ Evaluate Security Scan Outcome
        run: |
          SCAN_OUTCOME="${{ needs.scan-and-validate.outputs.scan_outcome }}"
          ACTIVE_FINDINGS="${{ needs.scan-and-validate.outputs.active_findings_count }}"

          echo "Scan job outcome: ${SCAN_OUTCOME}"
          echo "Active findings count: ${ACTIVE_FINDINGS}"

          if [ "${SCAN_OUTCOME}" = "success" ]; then
            echo "‚úÖ Security Gate: PASSED. No policy-violating active secrets found."
          else
            echo "::error::üõë Security Gate: FAILED. Active secrets were detected that violate policy."
            exit 1
          fi

